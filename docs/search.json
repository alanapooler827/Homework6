[
  {
    "objectID": "better_programming.html",
    "href": "better_programming.html",
    "title": "Better Programming",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\nlapply() applies functions, like mean(), to lists. The equivalent purrr function is map().\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below!\nlapply(X = numeric_matrix, FUN = cor, method = \"kendall\")\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nIt gives use a cleaner/more consistent way to apply functions to objects\nPurrr has lots of helper functions to help you write compact code\n\nWhat is a side-effect function?\nA side effect function modifies some state. An example is write_csv() which creates a new csv file, or setwd(), which sets the working directory, modifying the R session.\nWhy can you name a variable ‘sd’ in a function and not cause any issues with the ‘sd’ function?\nCalling a function creates a temporary function environment, allowing variables in a function to have the same name as global variables."
  },
  {
    "objectID": "better_programming.html#task-1-conceptual-questions",
    "href": "better_programming.html#task-1-conceptual-questions",
    "title": "Better Programming",
    "section": "",
    "text": "What is the purpose of the lapply() function? What is the equivalent purrr function?\nlapply() applies functions, like mean(), to lists. The equivalent purrr function is map().\nSuppose we have a list called my_list. Each element of the list is a numeric data frame (all columns are numeric). We want use lapply() to run the code cor(numeric_matrix, method = “kendall”) on each element of the list. Write code to do this below!\nlapply(X = numeric_matrix, FUN = cor, method = \"kendall\")\nWhat are two advantages of using purrr functions instead of the BaseR apply family?\n\nIt gives use a cleaner/more consistent way to apply functions to objects\nPurrr has lots of helper functions to help you write compact code\n\nWhat is a side-effect function?\nA side effect function modifies some state. An example is write_csv() which creates a new csv file, or setwd(), which sets the working directory, modifying the R session.\nWhy can you name a variable ‘sd’ in a function and not cause any issues with the ‘sd’ function?\nCalling a function creates a temporary function environment, allowing variables in a function to have the same name as global variables."
  },
  {
    "objectID": "better_programming.html#task-2-writing-r-functions",
    "href": "better_programming.html#task-2-writing-r-functions",
    "title": "Better Programming",
    "section": "Task 2: Writing R Functions",
    "text": "Task 2: Writing R Functions\n\nWrite a basic function that takes in a vector of responses and a vector of predictions and outputs the RMSE. If a value is missing for the vector of responses (i.e. an NA is present), allow for additional arguments to the mean() function (elipses) that removes the NA values in the computation.\n\n\ngetRMSE &lt;- function(response, predictions, ...) {\n  # find the squared errors\n  sq_errors &lt;- (response - predictions)^2\n\n  # calculate RMSE\n  RMSE &lt;- sqrt(mean(sq_errors, ...))\n  \n  return(RMSE)\n}\n\n\nTest getRMSE() with and without NA values\n\nGenerate sample data\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\ngetRMSE() function without missing values\n\ngetRMSE(resp, pred)\n\n[1] 0.9581677\n\n\ngetRMSE() with missing values\n\n# change two values from resp to NA\nresp[1:2] &lt;- NA_real_\n\n# call getRMSE with na.rm set to true\ngetRMSE(resp, pred, na.rm = TRUE)\n\n[1] 0.9661699\n\n\n\nWrite a function called getMAE() that follows the specifications of the getRMSE() function.\n\n\ngetMAE &lt;- function(response, predictions, ...) {\n  # calculate absolute value of errors\n  errors &lt;- abs(response - predictions)\n  \n  # calculate MAE\n  MAE &lt;- mean(errors, ...)\n  \n  return(MAE)\n}\n\n\nTest getMAE() with and without missing values\n\nGenerate sample data\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nTest getMAE() without missing values\n\ngetMAE(resp, pred)\n\n[1] 0.8155776\n\n\nTest getMAE() with missing values\n\nresp[1:2] &lt;- NA_real_\n\ngetMAE(resp, pred, na.rm = TRUE)\n\n[1] 0.8241201\n\n\n\nCreate a wrapper function that can be used to get either or both metrics returned with a single function call. When returning your values, give them appropriate names. Function should:\n\n\ncheck that two numeric (atomic) vectors have been passed (consider is.vector(), is.atomic(), and is.numeric()). If not, the function should stop and print an informative message.\nreturn both metrics by default and include names. The behavior should be able to be changed using a character string of metrics to find.\n\n\nget_MAE_RMSE &lt;- function(response, predictions, metric = c('MAE', 'RMSE'), ...) {\n  # check data types for response and predictions vectors\n  if (!is.numeric(response) || !is.atomic(response))\n    stop('Response is not a numeric vector')\n  \n  if (!is.numeric(predictions) || !is.atomic(predictions))\n    stop('Response is not a numeric vector')\n  \n  # create empty list to store calculated metrics\n  result &lt;- c()\n  # check for each metric in the metric argument\n  if ('MAE' %in% metric) {\n    result['MAE'] &lt;- getMAE(response, predictions, ...)\n  }\n  \n  if ('RMSE' %in% metric) {\n    result['RMSE'] &lt;- getRMSE(response, predictions, ...)\n  }\n  return(result)\n}\n\n\nTest get_MAE_RMSE() with and without missing values\n\nGenerate sample data\n\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10 * x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\nTest function without missing values\n\nget_MAE_RMSE(resp, pred)\n\n      MAE      RMSE \n0.8155776 0.9581677 \n\n\nTest function with missing values\n\n# add missing values to resp\nresp[1:2] &lt;- NA_real_\n\n# test function\nget_MAE_RMSE(resp, pred, na.rm = TRUE)\n\n      MAE      RMSE \n0.8241201 0.9661699"
  },
  {
    "objectID": "better_programming.html#task-3-practice-with-purrr",
    "href": "better_programming.html#task-3-practice-with-purrr",
    "title": "Better Programming",
    "section": "Task 3: Practice with Purrr",
    "text": "Task 3: Practice with Purrr"
  }
]